<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="/sudoku.css">
    <link rel="stylesheet" href="/UI.css">
</head>

<body>
    <h1 class="title">Create Sudoku Board</h1>
    <div class="box" id="sudoku-board"></div>
    <form action="/sudoku" method="POST" onsubmit="setMatrixValue()">
        <input type="text" hidden name="matrix" id="matrix-input">
        <button class="btn">Solve this sudoku</button>
    </form>
    <form action="/sudoku/play" method="POST" onsubmit="setMatrixValue2()">
        <input type="text" hidden name="matrix" id="matrix-input2">
        <button class="btn">Play</button>
    </form>
</body>

<script>

    const matrix = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
    ];

    function setMatrixValue() {
            const matrixInput = document.getElementById('matrix-input');
            matrixInput.value = JSON.stringify(matrix);
            // console.log(matrixInput.value);
    }
    function setMatrixValue2() {
            const matrixInput = document.getElementById('matrix-input2');
            matrixInput.value = JSON.stringify(matrix);
            // console.log(matrixInput.value);
    }

    function validateTheCell(curCell){
        curCell.classList.remove("cell-illegal");
        let row=curCell.name[5];
        let col=curCell.name[7];
        let box=curCell.name[9];
        for(let i=0;i<9;i++){
            if(i!=row && matrix[row][col]==matrix[i][col]){
                curCell.classList.add("cell-illegal")
                break;
            } 
        }
        for(let i=0;i<9;i++){
            if(i!=col && matrix[row][col]==matrix[row][i]){
                curCell.classList.add("cell-illegal")
                break;
            } 
        }

        for(let i=0;i<3;i++){
            for(let j=0;j<3;j++){
                let r=i+(3*Math.floor(box/3));
                let c=j+(3*(box%3));
                
                if(r!=row && c!=col && matrix[r][c]==matrix[row][col]){
                    curCell.classList.add("cell-illegal")
                    return;
                }
            }
        }
    }


    window.onload = function() {
        const board = document.getElementById('sudoku-board');
        for(let k=0;k<9;k++){
            const singleBox = document.createElement('div');
            singleBox.className = 'singleBox';
            for (let i = 0; i < 9; i++) {
                let idx=Math.floor(i/3)+(3*Math.floor(k/3));
                let jdx=(i%3)+(3*(k%3));
                const cell = document.createElement('input');
                cell.type = 'number';
                cell.name = `cell-${idx}-${jdx}-${k}`;
                cell.min = 1;
                cell.max = 9;
                cell.className = 'cell';
                if(matrix[idx][jdx] !== 0){
                    cell.value = matrix[idx][jdx];
                    cell.readOnly=true;
                    cell.classList.add('cell-given');
                } else{
                    cell.value = "";
                }
                singleBox.appendChild(cell);
            }
            board.appendChild(singleBox);
        }

        let cells=document.querySelectorAll('.cell');
        cells.forEach(cell => {
            cell.addEventListener('input', () => {
                let value = cell.value;
                if (value.length > 1) {
                    value = value.charAt(value.length - 1);
                }
                if (value < 1 || value > 9) {
                    cell.value = '';
                    cell.classList.remove("cell-illegal");
                    cell.classList.remove("cell-given");
                    matrix[parseInt(cell.name[5])][parseInt(cell.name[7])]=0;
                } else {
                    cell.value = value;
                    cell.classList.add("cell-given");
                    matrix[parseInt(cell.name[5])][parseInt(cell.name[7])]=parseInt(cell.value);
                    validateTheCell(cell);
                }
            });
        });    
    
    }
</script>

</html>